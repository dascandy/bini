#include <catch/catch.hpp>
#include <bini/writer.h>
#include <bini/reader.h>

TEST_CASE("Write various utf8 values (including out of range and surrogate pair) for correct encoding", "[UTF]") {
  Bini::writer wr;
  wr.addUtf8(0x0);
  wr.addUtf8(0x7f);
  wr.addUtf8(0x80);
  wr.addUtf8(0x7ff);
  wr.addUtf8(0x800);
  wr.addUtf8(0xfff);
  wr.addUtf8(0x1000);
  wr.addUtf8(0xffff);
  wr.addUtf8(0x10000);
  wr.addUtf8(0xfffff);
  wr.addUtf8(0x100000);
  wr.addUtf8(0x10ffff);
  wr.addUtf8(0x1fffff);
  wr.addUtf8(0x200000);
  wr.addUtf8(0xffffff);
  wr.addUtf8(0x3ffffff);
  wr.addUtf8(0x4000000);
  wr.addUtf8(0x7fffffff);
  std::vector<uint8_t> v = std::move(wr);
  std::vector<uint8_t> target = { 
    0x00, 
    0x7f, 
    0xc2, 0x80, 
    0xdf, 0xbf, 
    0xe0, 0xa0, 0x80, 
    0xe0, 0xbf, 0xbf, 
    0xe1, 0x80, 0x80,
    0xef, 0xbf, 0xbf, 
    0xf0, 0x90, 0x80, 0x80, 
    0xf3, 0xbf, 0xbf, 0xbf, 
    0xf4, 0x80, 0x80, 0x80,
    0xf4, 0xbf, 0xbf, 0xbf, 
    0xf7, 0xbf, 0xbf, 0xbf, 
    0xf8, 0x88, 0x80, 0x80, 0x80, 
    0xf8, 0xbf, 0xbf, 0xbf, 0xbf, 
    0xfb, 0xbf, 0xbf, 0xbf, 0xbf, 
    0xfc, 0x84, 0x80, 0x80, 0x80, 0x80, 
    0xfd, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf,
  };
  REQUIRE(v.size() == target.size());
  for (size_t n = 0; n < target.size(); n++) {
    REQUIRE(v[n] == target[n]);
  }
}


